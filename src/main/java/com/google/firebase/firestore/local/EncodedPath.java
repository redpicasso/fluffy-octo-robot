package com.google.firebase.firestore.local;

import com.google.firebase.firestore.model.BasePath;
import com.google.firebase.firestore.model.FieldPath;
import com.google.firebase.firestore.model.ResourcePath;
import com.google.firebase.firestore.util.Assert;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* compiled from: com.google.firebase:firebase-firestore@@19.0.0 */
final class EncodedPath {
    private static final char ENCODED_ESCAPE = '\u0011';
    private static final char ENCODED_NUL = '\u0010';
    private static final char ENCODED_SEPARATOR = '\u0001';
    private static final char ESCAPE = '\u0001';

    EncodedPath() {
    }

    static <B extends BasePath<B>> String encode(B b) {
        StringBuilder stringBuilder = new StringBuilder();
        int length = b.length();
        for (int i = 0; i < length; i++) {
            if (stringBuilder.length() > 0) {
                encodeSeparator(stringBuilder);
            }
            encodeSegment(b.getSegment(i), stringBuilder);
        }
        encodeSeparator(stringBuilder);
        return stringBuilder.toString();
    }

    private static void encodeSegment(String str, StringBuilder stringBuilder) {
        int length = str.length();
        for (int i = 0; i < length; i++) {
            char charAt = str.charAt(i);
            if (charAt == 0) {
                stringBuilder.append(1);
                stringBuilder.append(ENCODED_NUL);
            } else if (charAt != 1) {
                stringBuilder.append(charAt);
            } else {
                stringBuilder.append(1);
                stringBuilder.append(ENCODED_ESCAPE);
            }
        }
    }

    private static void encodeSeparator(StringBuilder stringBuilder) {
        stringBuilder.append(1);
        stringBuilder.append(1);
    }

    static ResourcePath decodeResourcePath(String str) {
        return ResourcePath.fromSegments(decode(str));
    }

    static FieldPath decodeFieldPath(String str) {
        return FieldPath.fromSegments(decode(str));
    }

    private static List<String> decode(String str) {
        int length = str.length();
        Assert.hardAssert(length >= 2, "Invalid path \"%s\"", str);
        if (length == 2) {
            boolean z = str.charAt(0) == 1 && str.charAt(1) == 1;
            Assert.hardAssert(z, "Non-empty path \"%s\" had length 2", str);
            return Collections.emptyList();
        }
        int length2 = str.length() - 2;
        List<String> arrayList = new ArrayList();
        StringBuilder stringBuilder = new StringBuilder();
        int i = 0;
        while (i < length) {
            int indexOf = str.indexOf(1, i);
            String str2 = "\"";
            String str3 = "Invalid encoded resource path: \"";
            StringBuilder stringBuilder2;
            if (indexOf < 0 || indexOf > length2) {
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append(str3);
                stringBuilder2.append(str);
                stringBuilder2.append(str2);
                throw new IllegalArgumentException(stringBuilder2.toString());
            }
            int i2 = indexOf + 1;
            char charAt = str.charAt(i2);
            if (charAt == 1) {
                Object substring = str.substring(i, indexOf);
                if (stringBuilder.length() != 0) {
                    stringBuilder.append(substring);
                    substring = stringBuilder.toString();
                    stringBuilder.setLength(0);
                }
                arrayList.add(substring);
            } else if (charAt == ENCODED_NUL) {
                stringBuilder.append(str.substring(i, indexOf));
                stringBuilder.append(0);
            } else if (charAt == ENCODED_ESCAPE) {
                stringBuilder.append(str.substring(i, i2));
            } else {
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append(str3);
                stringBuilder2.append(str);
                stringBuilder2.append(str2);
                throw new IllegalArgumentException(stringBuilder2.toString());
            }
            i = indexOf + 2;
        }
        return arrayList;
    }

    static String prefixSuccessor(String str) {
        StringBuilder stringBuilder = new StringBuilder(str);
        int length = stringBuilder.length() - 1;
        char charAt = stringBuilder.charAt(length);
        Assert.hardAssert(charAt == 1, "successor may only operate on paths generated by encode", new Object[0]);
        stringBuilder.setCharAt(length, (char) (charAt + 1));
        return stringBuilder.toString();
    }
}
